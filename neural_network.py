''' Useful but no longer the main neural network. Will revisit and take prediction and analysis details '''

import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers.normalization import BatchNormalization
import parse_csv as p
import nn_functions as n

testing_binary_classifier = False
testing_large_data_set = True

if testing_large_data_set:
    filename = '41591_2018_161_MOESM3_ESM.csv'
else:
    filename = '41591_2018_161_MOESM4_ESM.csv'

# load the dataset
# dataset = loadtxt(filename, delimiter=',')

# split into input (X) and output (y) variables
if testing_large_data_set:
    attributes, classifier1, classifier2, classifier3, averages, standard_deviations = p.parse_csv(filename, 185, 60)
else:
    attributes, classifier1 = p.parse_csv_small(filename, 4, 18)
    classifier2 = -1

# define the keras model
model = Sequential()
if testing_large_data_set:
    model.add(Dense(64, input_dim=185, activation='relu'))
    model.add(BatchNormalization())
else:
    model.add(Dense(64, input_dim=4, activation='relu'))
    model.add(BatchNormalization())

model.add(Dense(8, activation='relu'))
if testing_binary_classifier:
    model.add(Dense(1, activation='sigmoid'))

# compile the keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# fit the keras model on the dataset
if testing_binary_classifier:
    model.fit(attributes, classifier1, validation_split=0.2, epochs=150, batch_size=10)
else:
    model.fit(attributes, classifier3, validation_split=0.2, epochs=150, batch_size=10)

# evaluate the keras model
_, accuracy = model.evaluate(attributes, classifier3)
print('Accuracy: %.2f' % (accuracy*100))

# print('Weights: ')
# print(model.get_weights())
weights = model.get_weights()
counter = 0
for array in weights:
    outfile = "output" + str(counter) + ".csv"
    np.savetxt(outfile, array, delimiter=",")
    counter += 1



### Make Predictions ###

# predictions = [[8.4,17.52,141045.5,973.5], [11.8,28.46,163886.5,1995.5], [8.3,12.81,116096.75,589.25], [10,19.33,132087.5,929.25]]

# prediction_results = model.predict_classes(predictions)
# print(prediction_results)

p.predict_raw_data(model, True, averages, standard_deviations, [162.20,0.41,1.22,8.85,13.56,41.65,11.11,28.77,60.12,77.36,25.58,23.44,21.50,44.95,5.01,6.09,0.00,4.71,9.76,2.10,12.20,12.20,14.31,2.96,2.51,15.52,0.00,1.38,2.24,1.87,1.08,173,61127,56248,29914,30187.5,129732,10766,26835.5,31521,85899,62928,3250,16553,12519,6970,26345.5,10047,66,6078,81,303.5,58,7058,2176.5,161.5,2929,49977.5,3363,3816.5,19334,18251.5,9143.5,17373,305,277.5,91815.5,81099.5,31578,46729,137644,9346,41906.5,57125.5,82125.5,76494,18388,8658,1338,6850.5,60420,35739,533,305,156,324,31897,230.5,2363,2216.5,403,355,95,76,137,109,805,83,54,93,1573,915.5,5684,808.5,76,92,2804,855,51935,328,567,124,3464,62.5,75,860.5,366,1854.5,267,338.5,92,895.5,86,74,218,116,610,56.5,273,14529,9928.5,3324.5,4527.5,59268.5,672.5,2165,2681.5,9850,4047,228,817,424,251.5,511,6315,2655,829,65686.5,47812,18673.5,34564.5,130576,4086,22389.5,29503,65914.5,39922.5,6205.5,3449,33539,17300,737,4002,47377.5,34697,70932.5,34709,213,2817,15600.5,9392,60502,5940,89.5,78.5,166.5,67.25,71.75,158.75,242.75,216.75,109.5,262,164.5,82,132.25,155,151,74.5,129])
p.predict_raw_data(model, True, averages, standard_deviations, [123.49,0.94,0.71,10.17,13.90,43.55,19.46,43.13,37.41,94.96,30.20,2.63,16.20,18.82,8.91,10.56,0.00,8.10,16.49,1.82,16.71,16.71,18.79,1.61,2.63,10.81,0.00,0.93,0.22,0.39,0.00,195,72846,61389,30142,76585,136823,10220,50000,45224,83562,29913.5,8478,10394,18058,7142,46238,8802.5,68,20566,98.5,256,110.5,9603,5588.5,474.5,24498.5,56795,6318,7063,20132.5,6400.5,4018,8509,1420,457.5,101824.5,88714.5,49020,83767,149887,5033.5,69038,82730,89102,41131,3520,5382,14670,5631,84588,53853.5,812,586.5,375,1103,17142,311,2323,409,647,361,203,97,530.5,221,1102,400,66,193,3223,1781,7347,3325,80,186,7604,2832,56550,10561.5,1693,317,5767,1133,83.5,1098,498,2346,979,565,196.5,1466,456,79,212,149.5,636,119,419,20041,14234,6522.5,17780,74008.5,605.5,5199,5437.5,12044.5,2494,336.5,366,443,1304,585,11241,3389.5,1228,81327.5,66006,31738,85477,134315,2270,45235,48701,83003.5,21569,817,3552,49818,22572,1304,7253,70839,52774,95256.5,66364,220,3521.5,15007,10062.5,56767,14666,224.25,65,337.25,219,74.5,132,457.5,210.75,239,214,230.5,104.5,235,148.75,255,152,181.25])
p.predict_raw_data(model, True, averages, standard_deviations, [154.59,0.58,1.86,7.15,12.42,44.15,7.90,22.68,69.43,77.32,22.96,24.78,33.19,57.97,4.72,3.17,1.05,1.72,7.10,2.15,10.66,10.66,10.16,3.44,2.93,26.40,0.00,1.71,3.37,1.26,2.71,225,56362,45748,22481,47834,132217,18388,50981,55062,51265.5,88168,7836,24578,24943,11000,38566.5,7208,72,2435,113,229,139,5814,1811,232.5,8575,58208,10847.5,12223.5,14576,39170.5,13615,25559,1132,167,53306,41667,18514,46067.5,121262,10691.5,48678,49248,46831,75741.5,15665,11850,21386,5949,38600.5,13903.5,455.5,273,261,311,7013,605,526,2729,1012,584,140,72.5,111,108,885.5,144,60,89,1052,811,6285,1455.5,54,103,1255.5,600,19930,852,814,198,5641.5,322,84,811.5,398.5,2250,491,310,133.5,1176,139,81,131.5,87,480,64,576,28568,21842,7875.5,15011,94084,1601,7839,9000,9081.5,20941.5,395,1799.5,944,3615,1121.5,16136.5,4850.5,1011,60773.5,48849,23188,51026.5,134224,6300,35648,44483,44027,89467,7933,4468,42408,16742,1146,7175.5,50058.5,42284,93147,54918,367,5748.5,22060,15276,77187,11040,110.25,64.5,170,106.25,73,195.75,242.75,357.5,127,290.5,253,139.5,146.25,208,135.75,87.25,168.25])
p.predict_raw_data(model, True, averages, standard_deviations, [90.17,1.47,1.83,5.79,11.38,39.90,13.67,24.39,61.94,75.78,18.79,22.68,28.15,50.83,7.68,5.98,0.52,7.03,5.20,3.02,8.62,8.62,13.20,0.92,2.89,19.96,0.00,2.29,1.87,0.97,0.00,230.5,95806,74362,40687,61104,149933,34816,84622.5,84656,97971.5,127589,10819.5,62745.5,25445,25718,64820,18901,64,2283.5,99.5,199.5,122,22025,6243,378.5,14024,64045,25240,31601,41154,50206,14913,27725,3721,209,64387,50125.5,20212,42796,121843,13932.5,51607.5,63110.5,68764.5,93127,30586,9338,5383,9282,44665,13237,1502,697.5,250.5,528,12239.5,700,2467,7716,1055,805,254,100,525,265,1408,277,68,126,2528,1459,6798.5,1906.5,61.5,137,10901,4735,34871.5,3380,2337,338,5315.5,380.5,89,1314,475,2176,630,769,196.5,1346.5,292,78,220.5,123,394,68,555.5,32262,22287,8935,11614,101688,2188,10788,14214.5,17692.5,27474,457.5,4589,958,1466,2051.5,19744.5,6444,1279,95144,71204,30153,66895,143503,12307,80438,99955,108414,127247,32911.5,12780,61628,28637,1368,7995,80617.5,56142,100163,62098,408,7053,33171.5,19849.5,86215.5,12946.5,136.75,60.5,196.5,93.25,72.5,75.5,291.5,230.5,127.5,149,136.5,70.5,135.5,105.75,175,89.5,106])
p.predict_raw_data(model, True, averages, standard_deviations, [123.02,0.38,0.92,6.31,9.43,32.20,7.22,22.13,70.66,74.27,15.19,22.77,34.67,57.44,4.74,2.48,1.25,4.27,6.83,2.73,7.04,7.04,14.55,1.39,4.02,26.76,0.00,1.16,1.24,2.04,1.07,38,54857,45577,23404.5,18278.5,112427,6914,43046.5,39079,36799,4297,6321,7575.5,15303,4481.5,45988,1118,63,70.5,65,129,107,149,101,93,115,19175,846,565,490.5,4518,9510,16250,76,107,24920,26151.5,5365.5,10417,66325,1831.5,13747,13580,10653,924,2127,5325.5,527.5,591,18172,1110,119,102,112.5,98,518,319,118.5,222,533,415,68,60,72,78.5,171,79,60,55.5,126.5,198.5,1611,135.5,66.5,87.5,184.5,139,1532,160,86,63,129.5,43.5,72,190.5,113.5,587,102,85,67,193,28,66,82,80,110,44,204,8112,2074,1325.5,2142.5,25399.5,250,1975,1717,1948.5,391.5,125.5,199,208.5,143,157.5,2138.5,576.5,722.5,33413.5,25422,9654.5,16791,81316.5,1062,14475.5,15092.5,15011,2152,1235,762,26174,5876,724,4984,25082,25128.5,62878.5,23356.5,191,2043,8277,5774,37650.5,2249.5,109.25,60.75,180.75,80.5,72,86.25,283.75,137.75,113.5,133.5,148,72.25,98.25,121.5,152.75,91,113.75])